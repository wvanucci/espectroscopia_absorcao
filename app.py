# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a3uac-LdaYlqr5Qy6CinfiFC0AjpJuEq
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
import pandas as pd
import io
# --- 0. CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(layout="wide", page_title="Explorador de Espectros Estelares")

# --- 1. FUN√á√ïES E DADOS COMUNS (DEFINIDOS UMA VEZ PARA TODO O APP) ---
# Todas as fun√ß√µes e dicion√°rios que voc√™ definiu no seu notebook.

def planck(wavelength_nm, T_kelvin):
    h = 6.626e-34; c = 3.0e8; k = 1.38e-23
    wav_m = wavelength_nm * 1e-9
    intensity = (2*h*c**2) / (wav_m**5 * (np.exp((h*c)/(wav_m*k*T_kelvin)) - 1))
    return np.nan_to_num(intensity)

def calcular_temp_por_pico(pico_nm):
    b = 2.898e-3
    pico_m = pico_nm * 1e-9
    if pico_m == 0: return 0
    return b / pico_m

def calcular_pico_wien(T_kelvin):
    b = 2.898e-3
    lambda_max_m = b / T_kelvin
    return lambda_max_m * 1e9

def get_classe_espectral(temp):
    if temp >= 30000: return "O"
    elif temp >= 10000 and temp < 30000: return "B"
    elif temp >= 7500 and temp < 10000: return "A"
    elif temp >= 6000 and temp < 7500: return "F"
    elif temp >= 5200 and temp < 6000: return "G"
    elif temp >= 3700 and temp < 5200: return "K"
    elif temp >= 2400 and temp < 3700: return "M"
    else: return "M"

def mostrar_tutorial_csv():
    """
    Exibe um st.expander com o tutorial de como abrir arquivos CSV.
    """
    with st.expander("Clique aqui para ver como abrir o arquivo .csv no Google Sheets ou Excel"):
        st.markdown("""
        O arquivo `.csv` √© um formato de texto simples para tabelas, compat√≠vel com a maioria dos programas de planilha. Veja como import√°-lo:

        ### üìà Google Sheets (Planilhas Google)
        1. Abra o Google Sheets em seu navegador: [sheets.google.com](https://sheets.google.com).
        2. No menu superior, v√° em **Arquivo** > **Importar**.
        3. Na janela que abrir, clique na aba **Upload** e selecione o arquivo `.csv` que voc√™ baixou.
        4. O Google geralmente detecta as configura√ß√µes automaticamente. Apenas confirme se o **Tipo de separador** est√° como "V√≠rgula (,)" e clique em **Importar dados**.

        ### üìä Microsoft Excel
        1. Abra o Microsoft Excel e crie uma **Pasta de trabalho em branco**.
        2. V√° para a aba **Dados** no menu superior.
        3. Na se√ß√£o "Obter e Transformar Dados", clique em **Do Texto/CSV**.
        4. Selecione o arquivo `.csv` que voc√™ baixou.
        5. Uma janela de pr√©-visualiza√ß√£o ir√° abrir. O Excel deve detectar automaticamente que o **Delimitador** √© "V√≠rgula". Se estiver correto, clique no bot√£o **Carregar**.
        """)
def gerar_relatorio_universal(lista_de_itens):
    """
    Gera um relat√≥rio em formato CSV a partir de uma lista de itens.
    Cada item √© um dicion√°rio que pode ser do tipo 'tabela' ou 'qa'.
    """
    output = io.StringIO()

    for item in lista_de_itens:
        # Adiciona um espa√ßo antes de cada novo item, exceto o primeiro
        if lista_de_itens.index(item) > 0:
            output.write('\n\n')

        # Se o item for uma tabela (DataFrame)
        if item['tipo'] == 'tabela':
            output.write(f"### {item['titulo']} ###\n") # Adiciona um t√≠tulo para a tabela
            item['df'].to_csv(output, index=False)

        # Se o item for um par de Pergunta e Resposta
        elif item['tipo'] == 'qa':
            # Cria um mini-dataframe para formatar a P&R em duas colunas
            qa_df = pd.DataFrame({
                "Item": [item['pergunta']],
                "Resposta": [item['resposta'] if item['resposta'] else "N√£o respondido."]
            })
            qa_df.to_csv(output, index=False)

    return output.getvalue()

LINHAS_ATLAS = {
    "Si IV":  {"linhas": [140.0, 155.0], "cor": "peachpuff"}, "He II":  {"linhas": [468.58, 656.00], "cor": "purple"},
    "Si III": {"linhas": [455.26, 456.78, 457.47], "cor": "darksalmon"}, "He I":   {"linhas": [388.84, 447.15, 587.56], "cor": "blue"},
    "Mg II":  {"linhas": [448.11], "cor": "dodgerblue"}, "Si II":  {"linhas": [634.71, 637.14], "cor": "deepskyblue"},
    "H":      {"linhas": [388.90, 410.17, 434.05, 486.13, 656.28], "cor": "cyan"}, "Ca II":  {"linhas": [393.40, 396.90], "cor": "green"},
    "Fe II":  {"linhas": [492.4, 501.8, 516.9], "cor": "limegreen"}, "Fe I":   {"linhas": [438.79, 526.95, 532.80], "cor": "gold"},
    "Ca I":   {"linhas": [422.67, 646.26, 649.38], "cor": "orange"}, "TiO":    {"linhas": [668.9, 709.0], "cor": "red"}
}

PARAMETROS_INTENSIDADE_AJUSTADOS = {
    "Si IV": (40000, 2500, 0.30), "He II": (35000, 4500, 0.60), "He I": (22000, 6000, 0.75),
    "Si III": (17000, 2500, 0.35), "Si II": (13500, 3000, 0.50), "Mg II": (9500, 2000, 0.40),
    "H": (10000, 3500, 1.00), "Fe II": (7000, 1800, 0.50), "Ca II": (5200, 1600, 1.00),
    "Fe I": (4500, 2000, 0.75), "Ca I": (3900, 1700, 0.85), "TiO": (3200, 1000, 1.0)
}
LINHAS_QUENTES = ["He II", "He I", "Si IV", "Si III", "Si II", "Mg II"]
LINHAS_FRIAS   = ["Fe I", "Ca I", "TiO"]

# --- T√çTULO PRINCIPAL DO APP ---
st.title("üî≠ Espectroscopia com Luz Vis√≠vel")

st.markdown("""
Bem-vindo ao Explorador de Espectros Estelares!
Esta ferramenta interativa foi projetada para ajudar a entender como os astr√¥nomos usam a luz das estrelas para determinar suas propriedades, como temperatura e composi√ß√£o qu√≠mica.
Use as abas abaixo para progredir passo a passo, desde a radia√ß√£o de corpo negro at√© a identifica√ß√£o de elementos qu√≠micos pelo espectro de luz vis√≠vel.
""")

# --- ESTRUTURA DE ABAS ---
tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
    "Etapa 1: Radia√ß√£o Ideal",
    "Etapa 2: Atlas Espectral",
    "Etapa 3: Espectro com Absor√ß√£o",
    "Etapa 4: Investiga√ß√£o",
    "Etapa 5: Linha de refer√™ncia",
    "Etapa 6: O espectro real: O trabalho do astrof√≠sico(a)",
    "Tutorial e Cr√©ditos"
])
# 3. Fun√ß√£o para converter o DataFrame para CSV
@st.cache_data
def convert_df_to_csv(df):
  return df.to_csv(index=False).encode('utf-8')

# --- C√ìDIGO DA ETAPA 1 (TRADU√á√ÉO LITERAL DA C√âLULA 1) ---
with tab1:
    st.header("Radia√ß√£o ideal de estrelas")

    pico_slider = st.slider("Pico de Emiss√£o (Œª_max):", 50, 3000, 500, 5, key="pico_e1")
    c1, c2 = st.columns(2)
    with c1:
        x_min_slider = st.slider("Zoom M√≠n (nm):", 0, 2000, 0, 10, key="zoom_min_e1")
    with c2:
        x_max_slider = st.slider("Zoom M√°x (nm):", 500, 4000, 1500, 10, key="zoom_max_e1")

    # L√≥gica de plotagem da Etapa 1
    temperatura = calcular_temp_por_pico(pico_slider)
    classe = get_classe_espectral(temperatura)
    wavelengths = np.linspace(x_min_slider, x_max_slider, 2000)
    fluxo_total = planck(np.linspace(1, 4000, 4000), temperatura)
    fluxo_continuo = planck(wavelengths, temperatura)
    max_real = np.max(fluxo_total)
    if max_real == 0: max_real = 1
    fluxo_norm = fluxo_continuo / max_real
    fig, ax = plt.subplots(figsize=(14, 7))
    ax.set_facecolor('#1e1e1e')
    cmap = LinearSegmentedColormap.from_list('vis', [(0.0,(0.29,0,0.51)), (0.17,(0,0,1)), (0.33,(0,1,1)), (0.50,(0,1,0)), (0.67,(1,1,0)), (0.83,(1,0.5,0)), (1.0,(1,0,0))])
    ax.imshow(np.vstack((wavelengths, wavelengths)), aspect='auto', cmap=cmap, extent=[400, 700, -0.05, 1.1])
    ax.plot(wavelengths, fluxo_norm, color='white', linewidth=2)
    if x_min_slider <= pico_slider <= x_max_slider:
        ax.axvline(x=pico_slider, color='gold', linestyle='--', linewidth=2, label=f'Pico de Emiss√£o (Œª_max): {pico_slider:.1f} nm')
    ax.set_title(f"Espectro para Œª_max = {pico_slider} nm (Classe {classe})", color='white', fontsize=16)
    ax.set_xlabel('Comprimento de Onda (nm)', color='white')
    ax.set_ylabel('Intensidade Relativa (Pico Real = 1)', color='white')
    ax.set_xlim(x_min_slider, x_max_slider); ax.set_ylim(-0.05, 1.1)
    ax.legend(loc='upper right')
    fig.set_facecolor('black')
    ax.grid(True, linestyle='--', alpha=0.5, color='gray')
    ax.tick_params(colors='white', which='both')
    ax_top = ax.twiny()
    ax_top.set_xlim(ax.get_xlim())
    tick_positions = [calcular_pico_wien(t) for t in [30000, 10000, 7500, 6000, 5200, 3700]]
    tick_labels = ['O', 'B', 'A', 'F', 'G', 'K']
    ax_top.set_xticks(tick_positions)
    ax_top.set_xticklabels(tick_labels, fontsize=12)
    ax_top.set_xlabel('Classe Espectral', color='white', fontsize=12, labelpad=10)
    pos_m = calcular_pico_wien(2400)
    ax_top.text(pos_m, 1.05, 'M', color='white', ha='center', va='center', transform=ax_top.get_xaxis_transform())
    ax_top.grid(False)
    ax_top.tick_params(axis='x', which='both', colors='white')
    st.pyplot(fig)

  # --- SE√á√ÉO DE ATIVIDADE (VERS√ÉO CORRIGIDA) ---
    st.divider()
    st.header("Atividade Pr√°tica: Usando a Lei de Wien")
    st.markdown("Use o simulador acima para encontrar o comprimento de onda de pico ($\lambda_{max}$) de diferentes classes de estrelas e anote na tabela abaixo para calcular suas temperaturas.")
    st.info("""
    **Instru√ß√µes:**
    1. Use o simulador acima para encontrar o $\lambda_{max}$ para cada classe espectral.
    2. **Observe o gr√°fico:** Para cada classe, qual √© a cor predominante que a estrela emite na faixa vis√≠vel (entre 400 e 700 nm)? Onde a curva de intensidade √© mais alta nessa faixa? Anote a cor (ex: "Azul", "Branco-azulado","Branco", "Amarelo", "Laranja", "Vermelho").
    3. Preencha a tabela abaixo. A temperatura ser√° calculada automaticamente.
    4. Ao final, responda √† pergunta de conclus√£o.
    """)
    with st.expander("Clique para ver a explica√ß√£o e um Exemplo de C√°lculo"):
        st.subheader("A F√≥rmula da Lei de Wien")
        st.latex(r''' T = \frac{b}{\lambda_{\text{max}}} ''')
        st.markdown(r"""- $T$ = Temperatura (em Kelvin), $\lambda_{\text{max}}$ = Comprimento de onda do pico (em **metros**), $b$ = $2.898 \times 10^{-3} \text{ m}\cdot\text{K}$.
- **Lembre-se de converter:** $1 \text{ nm} = 1 \times 10^{-9} \text{ m}$.
- **Exemplo:** Para o Sol (Classe G), $\lambda_{max} \approx 500 \text{ nm}$. $T = \frac{2.898 \times 10^{-3}}{500 \times 10^{-9}} \approx 5796 \text{ K}$.
        """)
    
    if 'df_wien' not in st.session_state:
        dados_iniciais = {
            "Classe Espectral": ["G (Exemplo)", "", "", ""],
            "Œª_max (nm)": [500.0, None, None, None],
            "Temperatura (K)": [5796.0, None, None, None],
            "Cor Predominante Observada": ["Branco", "", "", ""]
        }
        st.session_state.df_wien = pd.DataFrame(dados_iniciais)

    # Agora a tabela √© criada com a garantia de que o session_state existe
    df_editado_e1 = st.data_editor(
        st.session_state.df_wien,
        num_rows="dynamic",
        hide_index=True,
        key="editor_etapa1"
    )
    st.session_state.df_wien = df_editado_e1

    # O resto do c√≥digo do gabarito e download continua daqui para baixo, sem altera√ß√µes...
    observacoes_feitas = (st.session_state.df_wien['Œª_max (nm)'].dropna().astype(str).str.strip() != '').sum()
    st.divider()
    if observacoes_feitas >= 6:
        st.subheader("Gabarito da atividade")
        st.success("Parab√©ns por completar a atividade! Confira seus c√°lculos na tabela abaixo.")

        # Prepara o DataFrame do gabarito
        df_aluno = st.session_state.df_wien.dropna(subset=['Œª_max (nm)']).copy()
        df_aluno['Temperatura Correta (K)'] = df_aluno['Œª_max (nm)'].apply(
            lambda x: round(calcular_temp_por_pico(pd.to_numeric(x, errors='coerce')), 1) if pd.to_numeric(x, errors='coerce') > 0 else None
        )

        # Renomeia colunas para clareza no gabarito
        df_gabarito = df_aluno.rename(columns={
            "Œª_max (nm)": "Œª_max (nm) Anotado",
            "Temperatura (K)": "Sua Temperatura (K) Anotada"
        })

        # Exibe o gabarito
        st.dataframe(
            df_gabarito[["Œª_max (nm) Anotado", "Sua Temperatura (K) Anotada", "Temperatura Correta (K)"]],
            hide_index=True,
            use_container_width=True
        )
    else:
        st.info(f"""
        Voc√™ fez **{observacoes_feitas}** de **6** observa√ß√µes necess√°rias.

        Continue calculando e preenchendo a tabela para revelar o gabarito e conferir seus resultados!
        """)

    csv_para_download = convert_df_to_csv(st.session_state.df_wien)
    st.download_button(label="üì• Baixar tabela em CSV", data=csv_para_download, file_name='minhas_temperaturas_wien.csv', mime='text/csv')

    # MUDAN√áA: Adicionada a caixa de pergunta e resposta para a conclus√£o
    st.divider()
    st.subheader("Pergunta de Conclus√£o")
    st.markdown("""
    Baseado nos dados que voc√™ coletou na tabela, qual √© a rela√ß√£o entre a **temperatura** de uma estrela e a **cor** que ela emite? Sua conclus√£o √© diferente do que o senso comum nos diz sobre as cores azul e vermelho para frio e quente?
    """)
    conclusao_aluno = st.text_area("Escreva sua conclus√£o aqui:", height=150)

    # --- SE√á√ÉO DE DOWNLOAD REATORADA ---
    st.divider()
    st.header("Salvar seu Trabalho da Etapa 1")

    # 1. Crie a "lista de tarefas" para o relat√≥rio da Etapa 1
    itens_relatorio_e1 = [
        {
            'tipo': 'tabela',
            'titulo': 'Tabela - Lei de Wien e Cor das Estrelas',
            'df': st.session_state.df_wien
        },
        {
            'tipo': 'qa',
            'pergunta': 'Conclus√£o: Qual a rela√ß√£o entre a temperatura de uma estrela e a sua cor?',
            'resposta': conclusao_aluno
        }
    ]

    # 2. Gere o relat√≥rio chamando a fun√ß√£o universal
    relatorio_csv_e1 = gerar_relatorio_universal(itens_relatorio_e1)

    # 3. Crie o bot√£o de download √∫nico
    st.download_button(
        label="üì• Baixar Relat√≥rio Completo da Etapa 1 (CSV)",
        data=relatorio_csv_e1.encode('utf-8'),
        file_name='relatorio_completo_etapa1.csv',
        mime='text/csv'
    )

    mostrar_tutorial_csv()
# --- C√ìDIGO DA ETAPA 2 (TRADU√á√ÉO LITERAL DA C√âLULA 2) ---
# --- CONTE√öDO DA ETAPA 2 ---
with tab2:
    st.header("Atlas Espectral de alguns √°tomos e um composto")
    st.markdown("Este √© um atlas de refer√™ncia que mostra as 'impress√µes digitais' (linhas de absor√ß√£o) dos principais elementos encontrados em estrelas.")

    # 1. Prepara√ß√£o da Figura
    fig_atlas, axs_atlas = plt.subplots(len(LINHAS_ATLAS), 1, figsize=(12, 20), sharex=False)
    fig_atlas.set_facecolor('black')
    fig_atlas.suptitle('Atlas Espectral de Refer√™ncia para Classifica√ß√£o Estelar', fontsize=20, y=0.99, color='white')

    # 2. Loop para criar cada subplot do atlas
    wavelengths_atlas = np.linspace(380, 800, 4000)
    num_elementos = len(LINHAS_ATLAS)

    for i, (nome, dados) in enumerate(LINHAS_ATLAS.items()):
        fluxo = np.ones_like(wavelengths_atlas)
        largura = 1.0 if nome != "TiO" else 8.0

        for linha_pos in dados["linhas"]:
            # S√≥ desenha a gaussiana se a linha estiver na faixa vis√≠vel do atlas
            if 380 <= linha_pos <= 800:
                gaussiana = 0.8 * np.exp(-((wavelengths_atlas - linha_pos)**2) / (2 * largura**2))
                fluxo -= gaussiana

        ax = axs_atlas[i]
        ax.set_facecolor('#1e1e1e')
        ax.plot(wavelengths_atlas, np.clip(fluxo, 0, 1), color=dados["cor"], lw=2)
        ax.set_title(f'Elemento: {nome}', loc='left', color="white")
        ax.set_yticks([]); ax.set_ylabel('Absor√ß√£o', color="white")
        ax.grid(True, linestyle='--', alpha=0.3)
        ax.set_xlim(wavelengths_atlas.min(), wavelengths_atlas.max())
        ax.tick_params(colors='white', which='both')

        # L√≥gica para formatar o eixo X exatamente como no seu notebook
        ax.set_xticks(np.arange(400, wavelengths_atlas.max() + 1, 50))
        ax.tick_params(axis='x', colors='white', labelcolor='white')

        if i < num_elementos - 1:
            ax.set_xlabel('')
            ax.tick_params(labelbottom=True)
        else:
            ax.set_xlabel('Comprimento de Onda (nm)', color="white")

    plt.tight_layout(rect=[0, 0, 1, 0.98])

    # 3. Exibi√ß√£o da figura no Streamlit
    st.pyplot(fig_atlas)

    # --- TABELA INTERATIVA ---
    st.subheader("Atividade de Anota√ß√£o")
    # MUDAN√áA: Texto atualizado com exemplo
    st.markdown("""
    Agora que voc√™ observou os espectros, anote na tabela abaixo os comprimentos de onda (em nm) que voc√™ identificou.
    **Preencha cada coluna 'Linha' com um √∫nico valor.**

    Use a √∫ltima coluna para adicionar **coment√°rios e observa√ß√µes** sobre as caracter√≠sticas das linhas (ex: largas, finas, muito pr√≥ximas, etc.).
    """)

    # 1. Prepara os dados para a tabela (sem a coluna de dados reais)
    # Tabela interativa usando st.session_state para preservar os dados
    if 'df_atlas_activity' not in st.session_state:
        elementos = list(LINHAS_ATLAS.keys())
        dados_iniciais_e2 = {
            "Elemento": elementos,
            "Linha 1 (nm)": [""] * len(elementos),
            "Linha 2 (nm)": [""] * len(elementos),
            "Linha 3 (nm)": [""] * len(elementos),
            "Linha 4 (nm)": [""] * len(elementos),
            "Linha 5 (nm)": [""] * len(elementos),
            "Observa√ß√µes / Coment√°rios": [""] * len(elementos)
        }
        # 1. CRIA a tabela na mem√≥ria na primeira vez
        st.session_state.df_atlas_activity = pd.DataFrame(dados_iniciais_e2)

    # 2. L√ä da mem√≥ria, exibe para edi√ß√£o e adiciona a KEY
    df_editado_e2 = st.data_editor(
        st.session_state.df_atlas_activity,
        num_rows="dynamic",
        hide_index=True,
        key="editor_etapa2"  # <-- Adiciona uma key √∫nica e est√°vel
    )

    # 3. SALVA as altera√ß√µes de volta na mem√≥ria (passo crucial)
    st.session_state.df_atlas_activity = df_editado_e2

    # Bot√£o de download usando a fun√ß√£o universal
    st.divider()

    # Cria a "lista de tarefas" para o relat√≥rio
    itens_relatorio_e2 = [
        {
            'tipo': 'tabela',
            'titulo': 'Tabela de Anota√ß√µes do Atlas Espectral',
            'df': df_editado_e2
        }
    ]

    # Gera o relat√≥rio e cria o bot√£o
    relatorio_csv_e2 = gerar_relatorio_universal(itens_relatorio_e2)
    st.download_button(
        label="üì• Baixar Anota√ß√µes do Atlas (CSV)",
        data=relatorio_csv_e2.encode('utf-8'),
        file_name='anotacoes_atlas_espectral.csv',
        mime='text/csv'
    )

    # O tutorial do CSV pode vir depois, se voc√™ o tiver nesta aba
    # mostrar_tutorial_csv()

    mostrar_tutorial_csv()


# --- C√ìDIGO DA ETAPA 3 (TRADU√á√ÉO LITERAL DA C√âLULA 3) ---
with tab3:
    st.header("Modelo simples de espectro de absor√ß√£o")
    with st.expander("Clique aqui para entender por que os espectros das estrelas t√™m 'vales'"):
        st.markdown("""
        Na Etapa 1, vimos o espectro **ideal** de uma estrela, a curva suave da radia√ß√£o de corpo negro. No entanto, quando olhamos para uma estrela real, o espectro que vemos n√£o √© assim t√£o perfeito. Ele √© cheio de "vales" ou linhas escuras, como voc√™ pode ver no simulador abaixo. Mas o que s√£o esses vales?

        ### Por que o Espectro de uma Estrela n√£o √© Ideal?

        Imagine que o n√∫cleo denso de uma estrela produz uma luz intensa e cont√≠nua, como uma l√¢mpada incandescente. Esse seria o espectro de corpo negro perfeito, um arco-√≠ris completo e sem falhas.

        Por√©m, essa luz precisa atravessar a atmosfera mais externa e mais fria da estrela para chegar at√© n√≥s. Nessa atmosfera, existem √°tomos de v√°rios elementos qu√≠micos (hidrog√™nio, h√©lio, c√°lcio, etc.). Cada tipo de √°tomo √© "sintonizado" para absorver comprimentos de onda (cores) muito espec√≠ficos de luz.

        Quando a luz cont√≠nua do n√∫cleo passa pela atmosfera, os √°tomos "roubam" exatamente a energia que eles gostam de absorver. O resultado √© que, no espectro que chega √† Terra, faltam essas cores espec√≠ficas. Esses "vales" s√£o as **linhas de absor√ß√£o**. Eles s√£o as impress√µes digitais dos elementos presentes na atmosfera da estrela.

        ### As Leis de Kirchhoff e os 3 Tipos de Espectros

        No s√©culo XIX, o f√≠sico Gustav Kirchhoff formulou tr√™s leis que descrevem perfeitamente como esses espectros s√£o formados:
        """)

        col1, col2 = st.columns(2)
        with col1:
            st.image("assets/lei_espectro.jpg", caption="Fonte: Adapatado de https://commons.wikimedia.org/wiki/File:Kirchhoff-spectroscopy-law.svg")
        with col2:
            st.markdown("""
            **1. Espectro Cont√≠nuo:**
            - **O que √©:** Um espectro completo e ininterrupto.
            - **Como se forma:** √â produzido por um objeto denso e quente, como o n√∫cleo de uma estrela ou o filamento de uma l√¢mpada incandescente. A luz √© emitida em todos os comprimentos de onda. **(Lei 1 de Kirchhoff)**

            **2. Espectro de Emiss√£o:**
            - **O que √©:** Apenas algumas linhas coloridas brilhantes sobre um fundo preto.
            - **Como se forma:** √â produzido por um g√°s quente de baixa densidade. O g√°s n√£o emite um espectro cont√≠nuo, mas apenas energias (correspondente a comprimento de onda) espec√≠ficas que seus √°tomos s√£o capazes de emitir. √â o oposto do espectro de absor√ß√£o. **(Lei 2 de Kirchhoff)**

            **3. Espectro de Absor√ß√£o:**
            - **O que √©:** Um espectro cont√≠nuo com linhas escuras (vales).
            - **Como se forma:** √â produzido quando a luz de uma fonte quente e cont√≠nua passa por um g√°s mais frio e de baixa densidade (como a atmosfera de uma estrela). O g√°s frio absorve as mesmas energias que emitiria se estivesse quente. **(Lei 3 de Kirchhoff)**

            - Volte para Etapa 2 e observe o espectro de absor√ß√£o de alguns elementos qu√≠micos.
            """)
        st.success("**Conclus√£o:** O espectro de uma estrela √© um **espectro de absor√ß√£o** porque estamos vendo a luz cont√≠nua do seu n√∫cleo denso depois que ela foi 'filtrada' pela sua atmosfera mais fria.")


    c1, c2 = st.columns(2)
    with c1:
        temp_e3 = st.slider("Temperatura (K)", 2800, 40000, 5800, 200, key="temp_e3")
        log_g_e3 = st.slider("Gravidade (log g)", 1.0, 5.0, 4.5, 0.1, key="logg_e3")
    with c2:
        x_min_e3 = st.slider("Zoom M√≠n (nm)", 50, 1000, 380, 10, key="zoom_min_e3")
        x_max_e3 = st.slider("Zoom M√°x (nm)", 400, 2000, 750, 10, key="zoom_max_e3")

    # L√≥gica de plotagem da Etapa 3
    wavelengths = np.linspace(x_min_e3, x_max_e3, 4000)
    temperatura = temp_e3
    log_g = log_g_e3
    classe = get_classe_espectral(temperatura)
    fluxo_continuo = planck(wavelengths, temperatura)
    fluxo_final = np.copy(fluxo_continuo)
    largura_base = 0.2 + (log_g - 1.0) * 0.3
    for nome, (pico_t, largura_t, fator_escala) in PARAMETROS_INTENSIDADE_AJUSTADOS.items():
        if nome in LINHAS_QUENTES and temperatura < 7500: continue
        if nome in LINHAS_FRIAS and temperatura > 8000: continue
        if nome == "Fe II" and temperatura < 4000: continue
        intensidade_relativa = np.exp(-((temperatura - pico_t)**2) / (2 * largura_t**2))
        if nome == "H" and temperatura >= 10000: intensidade_relativa = max(intensidade_relativa, 0.15)
        if nome == "TiO": intensidade_relativa = 1 / (1 + np.exp(0.005 * (temperatura - 3600)))
        if intensidade_relativa > 0.05:
            largura_linha = largura_base if nome != "TiO" else 8.0
            for linha_pos in LINHAS_ATLAS[nome]["linhas"]:
                idx_linha = np.argmin(np.abs(wavelengths - linha_pos))
                continuo_na_linha = fluxo_continuo[idx_linha]
                profundidade = (0.95 * intensidade_relativa * fator_escala) * continuo_na_linha
                gaussiana = profundidade * np.exp(-((wavelengths - linha_pos)**2) / (2 * largura_linha**2))
                fluxo_final -= gaussiana
    fluxo_final = np.clip(fluxo_final, 0, None)
    max_visivel = np.max(fluxo_continuo)
    if max_visivel == 0: max_visivel = 1
    continuo_norm = fluxo_continuo / max_visivel
    final_norm = fluxo_final / max_visivel
    pico_wien_nm = calcular_pico_wien(temperatura)
    fig, ax = plt.subplots(figsize=(14, 7))
    fig.set_facecolor('black'); ax.set_facecolor('#1e1e1e')
    ax.plot(wavelengths, continuo_norm, color='dimgray', linestyle=':', lw=1.5, alpha=0.9, label='Corpo Negro Ideal')
    ax.plot(wavelengths, final_norm, color='white', lw=1.5, label='Espectro com Absor√ß√£o')
    if x_min_e3 <= pico_wien_nm <= x_max_e3:
        ax.axvline(x=pico_wien_nm, color='gold', linestyle='--', linewidth=2, label=f'Pico de Wien: {pico_wien_nm:.1f} nm')
    ax.set_title(f'Espectro Simulado para uma Estrela de {temperatura} K (Classe {classe})', fontsize=16, color='white')
    ax.set_xlabel('Comprimento de Onda (nm)', color='white')
    ax.set_ylabel('Intensidade Relativa', color='white')
    ax.set_xlim(x_min_e3, x_max_e3)
    lim_y = np.max(continuo_norm) * 1.1 if np.max(continuo_norm) > 0 else 1.1
    ax.set_ylim(-0.05, lim_y)
    ax.grid(True, linestyle='--', alpha=0.5, color='gray')
    ax.tick_params(colors='white', which='both')
    ax.legend(loc='best')
    st.pyplot(fig)


# --- C√ìDIGO DA ETAPA 4 (TRADU√á√ÉO LITERAL DA C√âLULA 4) ---
with tab4:
    st.header("Atividade de identifica√ß√£o de √°tomos e composto em espectro de absor√ß√£o")

    st.markdown("Use os controles abaixo para gerar espectros de estrelas com diferentes temperaturas. O gr√°fico de cima mostra a curva de corpo negro e o de baixo mostra as linhas de absor√ß√£o que apareceriam.")
    c1, c2 = st.columns(2)
    with c1:
        temp_e4 = st.slider("Temperatura (K)", 2800, 40000, 5800, 200, key="temp_e4")
        log_g_e4 = st.slider("Gravidade (log g)", 1.0, 5.0, 2.0, 0.1, key="logg_e4")
    with c2:
        x_min_e4 = st.slider("Zoom M√≠n (nm)", 100, 1000, 380, 10, key="zoom_min_e4")
        x_max_e4 = st.slider("Zoom M√°x (nm)", 400, 2000, 750, 10, key="zoom_max_e4")

    # MUDAN√áA 1: Adicionada a explica√ß√£o sobre log(g)
    with st.expander("O que significa 'Gravidade (log g)'?"):
      st.markdown("""
    O termo **log(g)** refere-se √† **gravidade na superf√≠cie** da estrela, que est√° diretamente relacionada √† press√£o em sua atmosfera.

    * **'g'** √© a acelera√ß√£o da gravidade na superf√≠cie. Ela depende tanto da **massa** da estrela quanto do seu **raio**.
    * **'log'** √© a escala logar√≠tmica, usada para facilitar o trabalho com a vasta gama de valores de gravidade encontrados no universo.

    A rela√ß√£o chave √©: estrelas com **raio pequeno e alta densidade** (como an√£s) t√™m **alta gravidade superficial (log g alto)**. Estrelas com **raio muito grande** (como as gigantes e supergigantes), mesmo que sejam muito massivas, t√™m uma atmosfera expandida e, portanto, **baixa gravidade superficial (log g baixo)**.

    **Efeito no Espectro:** Uma gravidade maior (log g alto) comprime a atmosfera estelar, causando mais colis√µes entre os √°tomos. Essa "press√£o" alarga as linhas de absor√ß√£o. Portanto, estrelas gigantes (log g baixo) t√™m linhas espectrais finas e n√≠tidas, enquanto estrelas an√£s (log g alto) t√™m linhas mais largas.
    """)
    # L√≥gica de plotagem da Etapa 4
    wavelengths = np.linspace(x_min_e4, x_max_e4, 4000)
    temperatura = temp_e4
    log_g = log_g_e4
    classe = get_classe_espectral(temperatura)
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10), sharex=True, gridspec_kw={'height_ratios': [1, 1]})
    fig.set_facecolor('black')
    ax1.set_facecolor('#1e1e1e')
    fluxo_continuo = planck(wavelengths, temperatura)
    max_visivel = np.max(fluxo_continuo)
    if max_visivel == 0: max_visivel = 1
    continuo_norm = fluxo_continuo / max_visivel
    pico_nm = calcular_pico_wien(temperatura)
    grad_wl = np.linspace(380, 700, 500)
    grad_img = np.vstack((grad_wl, grad_wl))
    cmap = LinearSegmentedColormap.from_list('vis', [(0.0,(0.29,0,0.51)), (0.17,(0,0,1)), (0.33,(0,1,1)), (0.50,(0,1,0)), (0.67,(1,1,0)), (0.83,(1,0.5,0)), (1.0,(1,0,0))])
    ax1.imshow(grad_img, aspect='auto', cmap=cmap, extent=[380, 700, -0.05, 1.1])
    ax1.plot(wavelengths, continuo_norm, color='white', lw=2)
    if wavelengths.min() <= pico_nm <= wavelengths.max():
        ax1.axvline(x=pico_nm, color='gold', linestyle='--', lw=2, label=f'Pico de Wien: {pico_nm:.1f} nm')
    ax1.set_title(f'1. Espectro de Corpo Negro para {temperatura} K (Classe {classe})', color='white')
    ax1.set_ylabel('Intensidade Relativa', color='white')
    ax1.legend(loc='lower left'); ax1.grid(True, alpha=0.2); ax1.tick_params(colors='white'); ax1.set_ylim(-0.05, 1.1)
    ax2.set_facecolor('#1e1e1e')
    fluxo_absorcao = np.ones_like(wavelengths)
    largura_base = 0.2 + (log_g - 1.0) * 0.3
    for nome, (pico_t, largura_t, fator_escala) in PARAMETROS_INTENSIDADE_AJUSTADOS.items():
        if nome in LINHAS_QUENTES and temperatura < 7500: continue
        if nome in LINHAS_FRIAS and temperatura > 8000: continue
        if nome == "Fe II" and temperatura < 4000: continue
        intensidade_relativa = np.exp(-((temperatura - pico_t)**2) / (2 * largura_t**2))
        if nome == "H" and temperatura >= 10000:
            intensidade_relativa = max(intensidade_relativa, 0.15)
        if nome == "TiO":
            intensidade_relativa = 1 / (1 + np.exp(0.005 * (temperatura - 3600)))
        if intensidade_relativa > 0.05:
            largura_linha = largura_base if nome != "TiO" else 8.0
            for linha_pos in LINHAS_ATLAS[nome]["linhas"]:
                if wavelengths.min() <= linha_pos <= wavelengths.max():
                    profundidade = (1.0 * intensidade_relativa) * fator_escala
                    gaussiana = profundidade * np.exp(-((wavelengths - linha_pos)**2) / (2 * largura_linha**2))
                    fluxo_absorcao -= gaussiana
    ax2.plot(wavelengths, np.clip(fluxo_absorcao, 0, 1), color='white', lw=1.5)
    ax2.set_title(f'2. Linhas de Absor√ß√£o para log g = {log_g:.1f}', color='white')
    ax2.set_xlabel('Comprimento de Onda (nm)', color='white')
    ax2.set_ylabel('Intensidade Normalizada', color='white')
    ax2.grid(True, alpha=0.2); ax2.tick_params(colors='white'); ax2.set_ylim(-0.05, 1.1)
    st.pyplot(fig)

    # --- IN√çCIO DA NOVA SE√á√ÉO DE ATIVIDADE ---
    st.divider()
    st.header("Miss√£o: Decifrando o espectro na faixa do vis√≠vel")
    st.info("""
    **Seu objetivo:** Agir como um(a) astrof√≠sico(a) e identificar quais elementos qu√≠micos deixam suas "impress√µes digitais" em estrelas de diferentes temperaturas.

    **Instru√ß√µes:**
    1.  Use os sliders acima para escolher uma temperatura (ou use as temperaturas que voc√™ investigou na Etapa 1 para cada classe espectral).
    2.  Observe atentamente o gr√°fico normalizado **"2. Linhas de Absor√ß√£o"**.
    3.  Consulte o **"Etapa 2: Atlas Espectral"** (e seus dados) para comparar as posi√ß√µes dos "vales" (linhas de absor√ß√£o) com as linhas de refer√™ncia de cada elemento.
    4.  Preencha a tabela abaixo com suas descobertas. Adicione uma nova linha para cada classe espectral que voc√™ analisar.
    """)

    # Tabela interativa para a atividade
    if 'df_identificacao' not in st.session_state:
      dados_iniciais_e4 = {
        "Classe Espectral": ["G (Exemplo)", ""],
        "Temperatura (K)": [5800, None],
        "Elementos Identificados": ["Ca II, H, Fe I", ""],
        "Intensidade (ordem decrescente)": ["Ca II (muito forte), Fe I, H", ""],
        "Observa√ß√µes / Coment√°rios": ["As linhas do C√°lcio II s√£o muito proeminentes e ...", ""]
        }
      st.session_state.df_identificacao = pd.DataFrame(dados_iniciais_e4)

    df_editado_e4 = st.data_editor(
        st.session_state.df_identificacao,
        num_rows="dynamic",
        hide_index=True,
        key="editor_etapa4"
    )
    st.session_state.df_identificacao = df_editado_e4

    csv_para_download_e4 = convert_df_to_csv(df_editado_e4)
    st.download_button(label="üì• Baixar tabela de identifica√ß√£o (CSV)", data=csv_para_download_e4, file_name='minha_identificacao_espectral.csv', mime='text/csv')

    # Perguntas de an√°lise
    st.divider()
    st.subheader("Perguntas para An√°lise")
    st.markdown("1. Quais elementos (ou mol√©culas, como o TiO) t√™m suas linhas de absor√ß√£o mais fortes em estrelas de **baixa temperatura** (ex: ~3.000 K - 4.000 K)?")
    resposta1 = st.text_area("Resposta 1:", height=100, key="r1_e4")

    st.markdown("2. Olhando para todas as suas observa√ß√µes na tabela, qual elemento parece estar presente e vis√≠vel na **maioria das classes espectrais** que voc√™ analisou?")
    resposta2 = st.text_area("Resposta 2:", height=100, key="r2_e4")

    # MUDAN√áA 3: Adicionada a nova pergunta sobre log(g)
    st.markdown("3. Mantenha a temperatura fixa (ex: 6000 K) e mova o slider 'Gravidade (log g)'. O que acontece com a **largura** das linhas de absor√ß√£o quando voc√™ aumenta ou diminui o valor de log(g)? Descreva por que a largura das linhas espectrais varia e quais s√£o as diferen√ßas entre as caracter√≠sticas de estrelas com alto e baixo log(g).")
    resposta3 = st.text_area("Resposta 3:", height=100, key="r3_e4")

    # MUDAN√áA 2: L√≥gica para mostrar o "spoiler" apenas ap√≥s 6 observa√ß√µes
    st.divider()
    # Conta quantas linhas foram preenchidas na coluna "Elementos Identificados"
    observacoes_feitas = (df_editado_e4['Elementos Identificados'].str.strip() != '').sum()
    reflexao_final = ""
    if observacoes_feitas >= 6:

# NOVA SE√á√ÉO SOBRE CECILIA PAYNE (baseada no artigo)
        st.subheader("A revolu√ß√£o de uma cientista: Descoberta, G√™nero e Poder")
        st.markdown("""
        #### A Cren√ßa Antiga: Um Universo com a nossa Cara
        At√© a d√©cada de 1920, a vis√£o predominante, defendida por gigantes da √°rea como o astrof√≠sico **Henry Norris Russell**, era de que as estrelas e a Terra tinham composi√ß√µes qu√≠micas semelhantes. A l√≥gica era simples e baseada em observa√ß√£o direta: como as linhas espectrais de metais como Ferro (Fe) e C√°lcio (Ca) eram as mais fortes no espectro do Sol, esses deveriam ser os elementos mais abundantes. Acreditava-se que a intensidade de uma linha era um indicativo direto da quantidade do elemento.

        #### A Tese que mudou tudo
        Em sua tese de doutorado em 1925, **Cecilia Payne** fez algo radical.Usando a rec√©m-desenvolvida teoria qu√¢ntica, ela construiu um m√©todo quantitativo para explicar as linhas espectrais. Sua an√°lise matem√°tica rigorosa a levou a uma conclus√£o que contrariava todo o conhecimento vigente:

        * **Hidrog√™nio e H√©lio n√£o eram apenas presentes, mas sim os componentes esmagadoramente dominantes do universo**. Em suas contas, o hidrog√™nio era mais de um milh√£o de vezes mais abundante que o ferro na atmosfera solar.
        * A intensidade de uma linha espectral **n√£o mede a abund√¢ncia**, mas sim as **condi√ß√µes f√≠sicas** (principalmente a temperatura) da atmosfera da estrela, que determinam se um √°tomo est√° no estado correto de excita√ß√£o para absorver energia.

        **Por que as linhas "mentem"?**
        Para um √°tomo absorver luz, seu el√©tron precisa estar em um n√≠vel de energia espec√≠fico para poder "saltar" para um n√≠vel mais alto. A temperatura da estrela determina se os el√©trons est√£o nesse estado ideal:

        * **Em estrelas muito frias:** Os √°tomos n√£o t√™m energia suficiente para excitar seus el√©trons para o n√≠vel correto. As linhas de absor√ß√£o vis√≠veis s√£o fracas ou inexistentes.
        * **Em estrelas muito quentes:** A energia √© t√£o alta que a maioria dos el√©trons j√° foi arrancada dos √°tomos (ioniza√ß√£o). Sobram poucos √°tomos no estado certo para absorver a radia√ß√£o.

        #### A in√©rcia do conhecimento: O Confronto com o patriarcado e a autoridade
        A descoberta de Payne foi t√£o revolucion√°ria que foi recebida com enorme ceticismo. O pr√≥prio Russell, que era consultor de sua tese, a aconselhou a **n√£o** publicar sua principal conclus√£o, escrevendo que era "claramente imposs√≠vel" que o hidrog√™nio fosse t√£o abundante.

        Payne enfrentava um sistema onde a autoridade cient√≠fica era exclusivamente masculina. Desde seus tempos de estudante em Cambridge, ouviu de um diretor que "jamais seria uma astr√¥noma" e, em Harvard, mesmo realizando trabalho complexo, este era classificado como de "car√°ter feminino", com remunera√ß√£o inferior. Pressionada por uma das figuras mais poderosas da astronomia mundial, ela cedeu e adicionou uma ressalva em sua tese, afirmando que sua descoberta sobre a abund√¢ncia de hidrog√™nio e h√©lio era "quase certamente n√£o real".

        Quatro anos depois, usando uma metodologia diferente, o pr√≥prio Henry Norris Russell chegou √† mesma conclus√£o que Payne. Seu artigo se tornou a refer√™ncia na √°rea, e por muito tempo ele foi creditado como o pioneiro da descoberta. Embora ele tenha citado o trabalho dela, n√£o mencionou que ela havia chegado √† resposta correta anos antes e fora dissuadida por ele.

        Cecilia Payne continuou sua carreira em Harvard por mais de trinta anos, mas s√≥ foi oficialmente nomeada "professora" em 1956, tornando-se a primeira mulher a chefiar um departamento na universidade. Sua hist√≥ria √© um lembrete poderoso de que a ci√™ncia n√£o √© uma busca puramente objetiva; ela √© uma constru√ß√£o humana, influenciada por preconceitos, rela√ß√µes de poder e pela coragem daqueles que ousam desafiar o consenso.
        """)


        st.markdown("---")
        st.caption("""
    **Material de Apoio (Para Alunos e Professores):**

    A hist√≥ria de como Cecilia Payne revolucionou nosso entendimento da composi√ß√£o do universo √© fascinante e um marco na ci√™ncia. Para saber mais sobre seu trabalho e a f√≠sica por tr√°s da an√°lise espectral, leia o artigo:

    * [O papel de Cecilia Payne na determina√ß√£o da composi√ß√£o estelar](https://doi.org/10.1590/1806-9126-RBEF-2021-0028)
    * [Ra√ßa, g√™nero e classe social nas ci√™ncias f√≠sicas: o sil√™ncio dos homens](https://doi.org/10.47456/Cad.Astro.v5nEspecial.44894)
    """)
        # --- PERGUNTA FINALIZADORA (NOVA SE√á√ÉO) ---
        st.divider()
        st.header("Reflex√£o final")
        st.markdown("""
        A trajet√≥ria de Cecilia Payne-Gaposchkin √© um exemplo poderoso de como a ci√™ncia √© uma constru√ß√£o humana, sujeita a preconceitos, mas tamb√©m impulsionada pela coragem de pessoas marginalizadas e silenciadas.

        Com base no que voc√™ leu, escreva uma reflex√£o sobre como os desafios de g√™nero e a press√£o de cientistas estabelecidos impactaram n√£o apenas a carreira de Cecilia, mas tamb√©m o pr√≥prio avan√ßo do conhecimento cient√≠fico. 
        
        Reun√°m-se com os seus colegas e discuta os termos "car√°ter feminino" e "jamais seria uma astr√¥noma" no contexto do texto. O que esse tipo de atitude impacta na sociedade? Quais vozes/sujeitos est√£o em posi√ß√£o de poder, e em rela√ß√£o a quem? **
        """)

        reflexao_final = st.text_area("Escreva sua reflex√£o final aqui:", height=200, key="reflexao_final")

    else:
        st.info(f"""
        Voc√™ fez **{observacoes_feitas}** de **6** observa√ß√µes necess√°rias.

        Continue preenchendo a tabela de identifica√ß√£o para revelar uma conclus√£o importante sobre a an√°lise espectral!
        """)

# --- NOVO BOT√ÉO DE DOWNLOAD √öNICO ---
    st.divider()
    st.header("Salvar seu trabalho")
    st.markdown("Clique no bot√£o abaixo para baixar um relat√≥rio completo (.csv) com sua tabela e todas as suas respostas desta etapa.")

    # 1. Crie a "lista de tarefas" para o relat√≥rio da Etapa 4
    itens_relatorio_e4 = [
        {
            'tipo': 'tabela',
            'titulo': 'Tabela de Identifica√ß√£o Espectral',
            'df': df_editado_e4
        },
        {
            'tipo': 'qa',
            'pergunta': '1. Elementos mais fortes em estrelas de baixa temperatura?',
            'resposta': resposta1
        },
        {
            'tipo': 'qa',
            'pergunta': '2. Elemento vis√≠vel na maioria das classes espectrais?',
            'resposta': resposta2
        },
        {
            'tipo': 'qa',
            'pergunta': '3. O que acontece com a largura das linhas ao variar o log(g)?',
            'resposta': resposta3
        }
    ]
    # Adiciona a reflex√£o final apenas se ela existir
    if reflexao_final:
        itens_relatorio_e4.append({
            'tipo': 'qa',
            'pergunta': 'Reflex√£o Final sobre Cecilia Payne',
            'resposta': reflexao_final
        })

    # 2. Gere o relat√≥rio chamando a fun√ß√£o universal
    relatorio_csv = gerar_relatorio_universal(itens_relatorio_e4)

    # 3. Crie o bot√£o de download
    st.download_button(
        label="üì• Baixar relat√≥rio completo da etapa 4 (CSV)",
        data=relatorio_csv.encode('utf-8'),
        file_name='relatorio_completo_etapa4.csv',
        mime='text/csv'
    )
    mostrar_tutorial_csv()

# --- C√ìDIGO DA ETAPA 5 (TRADU√á√ÉO LITERAL DA C√âLULA 5) ---
with tab5:
    st.header("Linha de referencia de espectro no vis√≠vel")

    c1, c2 = st.columns(2)
    with c1:
        temp_e5 = st.slider("Temperatura (K)", 2800, 40000, 5800, 200, key="temp_e5")
        log_g_e5 = st.slider("Gravidade (log g)", 1.0, 5.0, 2.0, 0.1, key="logg_e5")
    with c2:
        x_min_e5 = st.slider("Zoom M√≠n (nm)", 100, 1000, 380, 10, key="zoom_min_e5")
        x_max_e5 = st.slider("Zoom M√°x (nm)", 400, 2000, 750, 10, key="zoom_max_e5")

    st.subheader("Marque os elementos para revelar suas posi√ß√µes:")
    marcadores_selecionados = []
    cols = st.columns(6)
    for i, nome in enumerate(LINHAS_ATLAS.keys()):
        with cols[i % 6]:
            if st.checkbox(nome, key=f"check_e5_{nome}"):
                marcadores_selecionados.append(nome)

    # L√≥gica de plotagem da Etapa 5
    wavelengths = np.linspace(x_min_e5, x_max_e5, 4000)
    temperatura = temp_e5
    log_g = log_g_e5
    classe = get_classe_espectral(temperatura)
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10), sharex=True, gridspec_kw={'height_ratios': [1, 1]})
    fig.set_facecolor('black')
    ax1.set_facecolor('#1e1e1e')
    fluxo_continuo = planck(wavelengths, temperatura)
    max_visivel = np.max(fluxo_continuo)
    if max_visivel == 0: max_visivel = 1
    continuo_norm = fluxo_continuo / max_visivel
    pico_nm = calcular_pico_wien(temperatura)
    grad_wl = np.linspace(380, 700, 500)
    grad_img = np.vstack((grad_wl, grad_wl))
    cmap = LinearSegmentedColormap.from_list('vis', [(0.0,(0.29,0,0.51)), (0.17,(0,0,1)), (0.33,(0,1,1)), (0.50,(0,1,0)), (0.67,(1,1,0)), (0.83,(1,0.5,0)), (1.0,(1,0,0))])
    ax1.imshow(grad_img, aspect='auto', cmap=cmap, extent=[380, 700, -0.05, 1.1])
    ax1.plot(wavelengths, continuo_norm, color='white', lw=2)
    if wavelengths.min() <= pico_nm <= wavelengths.max():
        ax1.axvline(x=pico_nm, color='gold', linestyle='--', lw=2, label=f'Pico de Wien: {pico_nm:.1f} nm')
    ax1.set_title(f'1. Espectro de Corpo Negro para {temperatura} K (Classe {classe})', color='white')
    ax1.set_ylabel('Intensidade Relativa', color='white')
    ax1.legend(loc='lower left'); ax1.grid(True, alpha=0.2); ax1.tick_params(colors='white'); ax1.set_ylim(-0.05, 1.1)
    ax2.set_facecolor('#1e1e1e')
    fluxo_absorcao = np.ones_like(wavelengths)
    largura_base = 0.2 + (log_g - 1.0) * 0.3
    for nome, (pico_t, largura_t, fator_escala) in PARAMETROS_INTENSIDADE_AJUSTADOS.items():
        if nome in LINHAS_QUENTES and temperatura < 7500: continue
        if nome in LINHAS_FRIAS and temperatura > 8000: continue
        if nome == "Fe II" and temperatura < 4000: continue
        intensidade_relativa = np.exp(-((temperatura - pico_t)**2) / (2 * largura_t**2))
        if nome == "H" and temperatura >= 10000:
            intensidade_relativa = max(intensidade_relativa, 0.15)
        if nome == "TiO":
            intensidade_relativa = 1 / (1 + np.exp(0.005 * (temperatura - 3600)))
        if intensidade_relativa > 0.05:
            largura_linha = largura_base if nome != "TiO" else 8.0
            for linha_pos in LINHAS_ATLAS[nome]["linhas"]:
                if wavelengths.min() <= linha_pos <= wavelengths.max():
                    profundidade = (1.0 * intensidade_relativa) * fator_escala
                    gaussiana = profundidade * np.exp(-((wavelengths - linha_pos)**2) / (2 * largura_linha**2))
                    fluxo_absorcao -= gaussiana
    ax2.plot(wavelengths, np.clip(fluxo_absorcao, 0, 1), color='white', lw=1.5)
    # L√≥gica para desenhar os marcadores
    for nome, dados in LINHAS_ATLAS.items():
        if nome in marcadores_selecionados:
            for linha_pos in dados["linhas"]:
                if x_min_e5 <= linha_pos <= x_max_e5:
                    ax2.axvline(x=linha_pos, color=dados["cor"], linestyle='--', lw=1.2, alpha=0.9)
    ax2.set_title(f'2. Linhas de Absor√ß√£o para log g = {log_g:.1f}', color='white')
    ax2.set_xlabel('Comprimento de Onda (nm)', color='white')
    ax2.set_ylabel('Intensidade Normalizada', color='white')
    ax2.grid(True, alpha=0.2); ax2.tick_params(colors='white'); ax2.set_ylim(-0.05, 1.1)
    st.pyplot(fig)

# --- C√ìDIGO DA ETAPA 6: AN√ÅLISE DE ESPECTROS REAIS ---
with tab6:
    st.header("üî≠ Etapa 6: An√°lise de Espectros Reais")

    # TEXTO INTRODUT√ìRIO QUE VOC√ä PEDIU
    st.markdown("""
    Bem-vindo(a) √† fronteira da astrof√≠sica moderna! At√© agora, voc√™ trabalhou com um simulador idealizado, um ambiente controlado para aprender os conceitos fundamentais. Agora, vamos encarar o desafio que os astrof√≠sicos enfrentam todos os dias: analisar dados reais.

    Grandes levantamentos de dados, como o **Sloan Digital Sky Survey (SDSS)** e bancos de dados especializados como o **Montreal White Dwarf Database (MWDD)**, coletaram milh√µes de espectros de estrelas, gal√°xias e quasares. Este trabalho monumental nos permite entender a evolu√ß√£o do universo, a composi√ß√£o de estrelas distantes e at√© mesmo os restos de planetas que orbitaram estrelas mortas.

    Ao olhar para os gr√°ficos abaixo, voc√™ notar√° que eles parecem bem mais "desconfort√°veis" e ca√≥ticos do que os do nosso simulador. Isso porque dados reais cont√™m **ru√≠do**: flutua√ß√µes aleat√≥rias causadas pelo detector do telesc√≥pio, pela atmosfera da Terra ou por fontes de luz de fundo. Um pequeno "vale" pode ser uma linha de absor√ß√£o real de um elemento qu√≠mico ou apenas uma flutua√ß√£o aleat√≥ria do ru√≠do.

    √â aqui que entra a experi√™ncia do astrof√≠sico: com estudo e t√©cnicas de processamento de dados, ele aprende a diferenciar o sinal do ru√≠do para, com confian√ßa, identificar os elementos que comp√µem uma estrela.
    """)

    # EXPANDER SOBRE ANGSTROM VS NAN√îMETRO
    with st.expander("Clique aqui para entender a unidade de medida Angstrom (√Ö)"):
        st.markdown(r"""
        Nos gr√°ficos de espectros profissionais, √© muito comum encontrar o comprimento de onda medido em **Angstroms (√Ö)**, em vez de nan√¥metros (nm). Ambas s√£o unidades de medida de comprimento extremamente pequenas, mas possuem uma rela√ß√£o simples entre si.

        O Angstrom foi nomeado em homenagem ao f√≠sico sueco Anders Jonas √Öngstr√∂m e √© definido como:
        $1 \text{ √Ö} = 10^{-10} \text{ metros}$

        A rela√ß√£o com o nan√¥metro √©:
        $$ 1 \text{ nm} = 10 \text{ √Ö} $$

        **Regra pr√°tica:** Para converter de Angstrom (√Ö) para nan√¥metro (nm), basta **dividir o valor por 10**.

        **Exemplo:**
        Um comprimento de onda de **4000 √Ö** (comum no espectro violeta) √© equivalente a:
        $$ \frac{4000 \text{ √Ö}}{10} = 400 \text{ nm} $$
        Este √© o mesmo valor que voc√™ v√™ no eixo do nosso simulador.
        """)

    st.divider()
    st.subheader("Analisando os Dados")

    # ABAS INTERNAS PARA CADA ESPECTRO
    spec_tab1, spec_tab2, spec_tab3 = st.tabs(["Espectro 1: An√£ Branca", "Espectro 2: Estrela Tipo Solar", "Espectro 3: Super Gigante"])
    with spec_tab1:
        st.subheader("Espectro de uma Estrela An√£ Branca (2MASS J00035692-0503328)")

        # Usando colunas para mostrar as duas imagens lado a lado
        col1, col2 = st.columns(2)

        with col1:
            # ATUALIZE O CAMINHO PARA A IMAGEM SEM LINHAS
            st.image("assets/image_35ada1.png", caption="Espectro real de uma an√£ branca.")
            
        with col2:
            # ATUALIZE O CAMINHO PARA A IMAGEM COM LINHAS
            st.image("assets/image_35ad6a.png", caption="Mesmo espectro, com as linhas de absor√ß√£o do Hidrog√™nio identificadas.")

        # Container com a an√°lise profissional que voc√™ pediu
        with st.container(border=True):
            st.markdown("""
            #### An√°lise Profissional: O Fim da Vida de uma Estrela
            
            Este √© um espectro real de uma **An√£ Branca**, o n√∫cleo denso e quente que resta ap√≥s uma estrela de massa semelhante √† do Sol esgotar seu combust√≠vel nuclear e ejetar suas camadas externas. Vamos analisar suas propriedades:

            * **Temperatura Efetiva:** **~17.100 K** (extremamente quente, quase tr√™s vezes a temperatura da superf√≠cie do Sol, que √© ~5.800 K).
            * **Massa:** **0.66 M‚òâ** (cerca de 66% da massa do nosso Sol).
            * **Gravidade Superficial (log g):** **8.07** (o Sol tem um log(g) de ~4.44). Esse valor √© **dezenas de milhares de vezes maior** que a gravidade do Sol e indica que a estrela √© incrivelmente densa: imagine 66% da massa do Sol espremida em um objeto do tamanho da Terra!

            **Desafio Interativo:** Com uma temperatura de 17.100 K, que cor voc√™ esperaria que essa estrela tivesse? Volte para o simulador da **Etapa 1**, ajuste o pico de emiss√£o para corresponder a essa temperatura e compare a cor da curva de corpo negro. A cor branco-azulada que voc√™ encontrar√° l√° faz sentido para uma estrela t√£o quente?

            #### A Import√¢ncia das "Impress√µes Digitais"
            
            As duas imagens acima mostram o mesmo espectro. Na segunda, destacamos as "impress√µes digitais" do √°tomo de **Hidrog√™nio** (as linhas da s√©rie de Balmer: HŒ± a 6563 √Ö, HŒ≤ a 4861 √Ö, etc.). Reconhecer esses padr√µes √© o primeiro passo para qualquer an√°lise. Uma vez que identificamos com certeza que essas s√£o linhas de hidrog√™nio, podemos us√°-las como **pontos de refer√™ncia** para estudar outras propriedades da estrela, como a imensa press√£o em sua atmosfera (note como as linhas s√£o extremamente largas!).

            #### Reflex√£o sobre o Desconhecido
            
            Observe o espectro na regi√£o **al√©m de 7000 √Ö**. As linhas de refer√™ncia mais proeminentes do hidrog√™nio no vis√≠vel n√£o est√£o mais l√°, mas o gr√°fico continua cheio de flutua√ß√µes. O que voc√™ acha que est√° acontecendo ali? Seriam linhas de outros elementos que n√£o marcamos, ou poderiam ser apenas ru√≠do do detector? √â exatamente esse tipo de quest√£o que um astrof√≠sico busca responder.
            """)

        # CAIXA DE TEXTO PARA O ALUNO (ATUALIZADA)
        st.text_area(
            "Analisando as linhas de Hidrog√™nio (HŒ±, HŒ≤, etc.), o que a **largura** delas sugere sobre esta estrela, especialmente quando voc√™ se lembra do efeito do log(g) na Etapa 4? E sobre a regi√£o ap√≥s 7000 √Ö, as flutua√ß√µes se parecem mais com ru√≠do ou com novas linhas de absor√ß√£o?",
            height=150,
            key="analise_spec1"
        )
        st.caption("""
        Fonte dos Dados: Os par√¢metros da estrela (temperatura, massa, etc.) foram consultados no [Montreal White Dwarf Database (MWDD)](https://www.montrealwhitedwarfdatabase.org/). A imagem do espectro foi gerada a partir dos dados p√∫blicos do [Sloan Digital Sky Survey (SDSS)](https://www.sdss.org/).
        """)
    with spec_tab2:
        st.subheader("Espectro de uma Estrela An√°loga Solar")

        # ATUALIZE O CAMINHO PARA A NOVA IMAGEM
        st.image("assets/espec_sol.png", caption="Espectro de uma estrela do tipo G, semelhante ao nosso Sol.")

        # Container com a an√°lise profissional
        with st.container(border=True):
            st.markdown("""
            #### An√°lise Profissional: Encontrando uma G√™mea do Sol?
            
            Este espectro pertence a uma estrela do tipo G, a mesma classe do nosso Sol. √Ä primeira vista, ela parece muito familiar: uma curva suave repleta de linhas de absor√ß√£o finas, indicando a presen√ßa de v√°rios elementos em sua atmosfera.

            Diferente dos espectros normalizados do simulador, este gr√°fico mostra o fluxo de energia real ($F_{\lambda}$) que recebemos da estrela em unidades f√≠sicas. Como ajuda, algumas das linhas de absor√ß√£o mais importantes j√° foram identificadas para n√≥s, incluindo as do **C√°lcio (CaII)**, **Hidrog√™nio (HŒ≤, HŒ±)** e **S√≥dio (Na)**.

            #### Um Desafio de Compara√ß√£o
            
            Nosso Sol tem uma temperatura de superf√≠cie de aproximadamente **5777 K** (usaremos esse valor padr√£o, que √© muito pr√≥ximo do que voc√™ usou), e o pico de sua emiss√£o de luz ($\lambda_{max}$) ocorre em torno de **5020 √Ö (ou 502 nm)**, na cor verde-amarela.

            Agora, observe atentamente o gr√°fico desta estrela. **Onde voc√™ diria que est√° o pico de emiss√£o dela?** O ponto mais alto da curva parece estar em um comprimento de onda **mais curto** ou **mais longo** que os 5020 √Ö do Sol?

            **Lembre-se da Lei de Wien da Etapa 1:** estrelas mais quentes t√™m seu pico de emiss√£o em comprimentos de onda mais curtos (deslocados para o azul). Com base nisso, esta estrela parece ser um pouco mais quente ou um pouco mais fria que o Sol? Sinta-se √† vontade para voltar ao simulador e confirmar a rela√ß√£o entre temperatura e pico de emiss√£o!

            #### Explore um Atlas Solar
            
            Para uma compara√ß√£o detalhada, astrof√≠sicos usam "atlas" espectrais de alt√≠ssima resolu√ß√£o do Sol. Se tiver curiosidade, voc√™ pode explorar um espectro solar interativo e tentar encontrar as mesmas linhas de absor√ß√£o no site do : [**BASS2000 Solar Survey**](https://bass2000.obspm.fr/solar_spect.php).
            """)

        # CAIXA DE TEXTO PARA O ALUNO (ATUALIZADA)
        st.text_area(
            "Com base na sua an√°lise visual do pico de emiss√£o, voc√™ acha que esta estrela √© mais quente ou mais fria que o Sol? Justifique sua resposta usando o que aprendeu na Etapa 1. Al√©m disso, as linhas de CaII e Na est√£o proeminentes como esperado para uma estrela deste tipo?",
            height=150,
            key="analise_spec2"
        )
        
        # Adicione a fonte dos dados se desejar
        st.caption("""
        Fonte dos Dados: Espectro obtido atrav√©s dos dados p√∫blicos do Sloan Digital Sky Survey (SDSS).
        """)
    with spec_tab3:
        st.subheader("Espectro de uma Estrela Supergigante")

        # ATUALIZE O CAMINHO PARA A IMAGEM DA SUPERGIGANTE
        st.image("assets/super_ging.png", caption="Espectro de uma estrela supergigante do tipo G/K, candidata selecionada do SDSS.")

        # Container com a an√°lise profissional
        with st.container(border=True):
            st.markdown("""
            #### An√°lise Profissional: O Gigante gentil do cosmos
            #### Par√¢metros F√≠sicos da Estrela

            Os dados  do SDSS nos contam a hist√≥ria desta estrela em n√∫meros. Vamos analis√°-los:

            * **Temperatura Efetiva:** **~4.500 K**. Isso confirma que estamos olhando para uma estrela relativamente "fria" (mais fria que o Sol), o que a classifica como uma **Supergigante Vermelha**. Essa temperatura √© perfeitamente consistente com o pico de emiss√£o que vemos na regi√£o laranja-vermelha do espectro.

            * **Gravidade Superficial (log g):** **~0.9**. Este √© um valor extremamente baixo e √© a prova num√©rica do que vimos no espectro. Ele confirma que a atmosfera da estrela √© incrivelmente rarefeita e expandida, a caracter√≠stica definitiva de uma supergigante.

            Este √© o espectro de uma estrela que selecionamos usando nosso filtro de baixa gravidade superficial (`log(g) < 2`). E o resultado visual √© uma confirma√ß√£o espetacular: estamos olhando para uma **Supergigante Amarela-Laranja**.

            #### A Assinatura de Baixa Gravidade
            
            A caracter√≠stica mais importante e reveladora aqui s√£o as **linhas de absor√ß√£o**. Observe como as linhas do Hidrog√™nio (HŒ≤, HŒ±), S√≥dio (Na) e o proeminente trio de linhas do C√°lcio (CaII), perto de 8665 √Ö, s√£o **extremamente finas e bem definidas**.

            **Compare agora:**
            - **An√£ Branca (Aba 1):** Linhas imensamente largas devido √† press√£o atmosf√©rica esmagadora (alto `log(g)`).
            - **Supergigante (Aqui):** Linhas muito estreitas devido a uma atmosfera rarefeita e "fofa" (baixo `log(g)`).

            Essa "magreza" das linhas √© a assinatura visual inconfund√≠vel de uma estrela de baix√≠ssima densidade.

            #### Temperatura e Evolu√ß√£o
            
            Analisando a forma geral do gr√°fico, vemos que o pico de emiss√£o de luz ($\lambda_{max}$) desta estrela est√° em torno de **~6500 √Ö**, na regi√£o amarela-laranja. Isso indica uma temperatura de superf√≠cie mais fria que a do Sol (provavelmente abaixo de 5.000 K).
            
            Apesar de ser mais "fria" que o Sol, n√£o se engane. O tamanho colossal desta estrela faz com que ela seja dezenas de milhares de vezes **mais luminosa** no total. Ela est√° em um est√°gio avan√ßado de sua vida, j√° tendo consumido o hidrog√™nio de seu n√∫cleo e agora "queimando" elementos mais pesados.
            """)

        # CAIXA DE TEXTO PARA O ALUNO (ATUALIZADA)
        st.text_area(
            "Qual √© a principal diferen√ßa que voc√™ nota nas linhas de absor√ß√£o desta estrela em compara√ß√£o com a An√£ Branca (Aba 1)? O que essa caracter√≠stica nos diz sobre a gravidade e a densidade da atmosfera da supergigante? (Dica: lembre-se do slider `log(g)` da Etapa 4).",
            height=150,
            key="analise_spec3"
        )
        
        # Adicione a fonte dos dados
        st.caption("""
        Fonte dos Dados: Espectro de uma candidata a supergigante, selecionado a partir dos dados p√∫blicos do Sloan Digital Sky Survey (SDSS).
        """)
    # --- SE√á√ÉO DE DOWNLOAD DA ETAPA 6 ---
    st.divider()
    st.header("Salvar seu trabalho da etapa 6")
    st.markdown("Clique no bot√£o abaixo para baixar um relat√≥rio completo (.csv) com todas as suas an√°lises dos espectros reais.")

    # 1. Coleta as respostas das caixas de texto
    # O Streamlit guarda o conte√∫do dos widgets na session_state usando a 'key' que definimos
    resposta_spec1 = st.session_state.get('analise_spec1', '') # Usar .get para seguran√ßa
    resposta_spec2 = st.session_state.get('analise_spec2', '')
    resposta_spec3 = st.session_state.get('analise_spec3', '')

    # 2. Crie a "lista de tarefas" para o relat√≥rio da Etapa 6
    itens_relatorio_e6 = [
        {
            'tipo': 'qa',
            'pergunta': 'An√°lise do Espectro 1 (An√£ Branca)',
            'resposta': resposta_spec1
        },
        {
            'tipo': 'qa',
            'pergunta': 'An√°lise do Espectro 2 (An√°loga Solar)',
            'resposta': resposta_spec2
        },
        {
            'tipo': 'qa',
            'pergunta': 'An√°lise do Espectro 3 (Supergigante)',
            'resposta': resposta_spec3
        }
    ]

    # 3. Gere o relat√≥rio chamando a fun√ß√£o universal
    relatorio_csv_e6 = gerar_relatorio_universal(itens_relatorio_e6)

    # 4. Crie o bot√£o de download
    st.download_button(
        label="üì• Baixar An√°lises dos Espectros Reais (CSV)",
        data=relatorio_csv_e6.encode('utf-8'),
        file_name='relatorio_espectros_reais.csv',
        mime='text/csv'
    )

    # 5. Mostra o tutorial de como abrir o arquivo
    mostrar_tutorial_csv()

# --- C√ìDIGO DA ETAPA 7: TUTORIAL, REFER√äNCIAS E CR√âDITOS ---
with tab7:
    st.header("üéì Tutorial: Explorando o Universo com SDSS SQL Search")
    st.markdown("""
    Este tutorial ensina como usar a ferramenta "SQL Search" do Sloan Digital Sky Survey (SDSS) para encontrar tipos espec√≠ficos de estrelas, como an√£s brancas, gigantes, supergigantes e estrelas da sequ√™ncia principal (como o Sol).
    """)

    st.subheader("Parte 1: Acessando a Ferramenta de Pesquisa SQL")
    st.markdown("""
    Primeiro, precisamos chegar √† ferramenta correta no site.
    1. Acesse a p√°gina inicial do SDSS SkyServer: [https://skyserver.sdss.org/](https://skyserver.sdss.org/)
    2. No menu superior, clique em **Search Tools**.
    3. No menu que aparece, clique em **SQL Search**.
    
    Voc√™ ver√° uma p√°gina com uma grande caixa de texto. √â aqui que inserimos nossos comandos.
    """)

    st.subheader("Parte 2: Entendendo o Comando SQL Base")
    st.markdown("""
    Todos os nossos comandos ter√£o uma estrutura parecida. Vamos usar nosso comando de "g√™mea solar" como o modelo base para entender cada parte:
    """)
    st.code("""
SELECT TOP 10
    s.specobjid, s.subclass, p.LOGGADOP, p.FEHADOP
FROM
    specObj AS s
JOIN
    SppParams AS p ON s.specobjid = p.SPECOBJID
WHERE
    s.class = 'STAR'
    AND s.subclass LIKE 'G2%'
    AND p.LOGGADOP BETWEEN 4.0 AND 4.5
    AND p.FEHADOP BETWEEN -0.2 AND 0.2
    """, language='sql')
    st.markdown("""
    - **`SELECT TOP 10 ...`**: Diz ao banco de dados o que queremos ver. Estamos pedindo para mostrar o ID do espectro (`specobjid`), a subclasse (`subclass`), a gravidade (`LOGGADOP`) e a metalicidade (`FEHADOP`) dos 10 primeiros resultados que encontrar.
    - **`FROM specObj AS s JOIN SppParams AS p ...`**: Diz onde vamos procurar. Estamos combinando (`JOIN`) duas tabelas: `specObj` (que tem informa√ß√µes b√°sicas do espectro) e `SppParams` (que tem os par√¢metros f√≠sicos detalhados).
    - **`WHERE ...`**: Esta √© a parte mais importante, onde definimos as regras do nosso filtro para encontrar exatamente o que queremos.
    """)

    st.subheader("Parte 3: Como Modificar o Filtro")
    st.markdown("""
    Para encontrar diferentes tipos de estrelas, voc√™ s√≥ precisa modificar as linhas dentro da cl√°usula `WHERE`. Os dois par√¢metros mais poderosos para isso s√£o `subclass` e `LOGGADOP`.
    """)
    st.info("""
    **1. O Par√¢metro `subclass` (O Tipo Espectral)**
    
    - **O que significa?**: A classifica√ß√£o detalhada da estrela baseada na sua temperatura. A sequ√™ncia √© O-B-A-F-G-K-M (da mais quente para a mais fria).
    - **Como modificar?**: Mude `s.subclass LIKE 'G2%'` para:
        - `s.subclass LIKE 'A%'`: Estrelas brancas, como Vega.
        - `s.subclass LIKE 'M%'`: An√£s vermelhas.
        - `s.subclass LIKE 'DA%'`: An√£s brancas com atmosfera de hidrog√™nio.
    
    *(O s√≠mbolo `%` √© um curinga que significa "qualquer coisa". Ent√£o, `G2%` encontra G2, G2V, etc.)*
    """, icon="üå°Ô∏è")
    st.info("""
    **2. O Par√¢metro `LOGGADOP` (O Tamanho e Tipo da Estrela)**
    
    - **O que significa?**: O logaritmo da gravidade na superf√≠cie, um n√∫mero que nos diz se a estrela √© uma an√£, gigante ou supergigante.
        - **Valor ALTO (`> 7.0`)**: Gravidade alt√≠ssima. Objeto denso e compacto (An√£s Brancas).
        - **Valor M√âDIO (`~4.0` a `4.5`)**: Gravidade "normal" (Sequ√™ncia Principal, como o Sol).
        - **Valor BAIXO (`~1.0` a `3.5`)**: Gravidade baixa. Estrela grande e "inchada" (Gigantes).
        - **Valor MUITO BAIXO (`< 2.0`)**: Gravidade extremamente baixa. Estrela imensa (Supergigantes).
    - **Como modificar?**: Mude `p.LOGGADOP BETWEEN 4.0 AND 4.5` para:
        - `p.LOGGADOP > 7.0`: Para an√£s brancas.
        - `p.LOGGADOP BETWEEN 1.0 AND 3.5`: Para gigantes.
        - `p.LOGGADOP BETWEEN -0.5 AND 2.0`: Para supergigantes.
    """, icon="üìè")

    st.subheader("Parte 4: Comandos Prontos para Usar")
    st.markdown("Aqui est√£o os quatro comandos que desenvolvemos, prontos para copiar e colar.")
    
    with st.expander("Clique para ver os comandos SQL"):
        st.markdown("**1. Estrela de Sequ√™ncia Principal (Tipo Solar)**")
        st.code("SELECT TOP 10 s.specobjid, s.subclass, p.LOGGADOP, p.FEHADOP FROM specObj AS s JOIN SppParams AS p ON s.specobjid = p.SPECOBJID WHERE s.class = 'STAR' AND s.subclass LIKE 'G2%' AND p.LOGGADOP BETWEEN 4.0 AND 4.5 AND p.FEHADOP BETWEEN -0.2 AND 0.2", language='sql')
        
        st.markdown("**2. Estrela Gigante**")
        st.code("SELECT TOP 10 s.specobjid, s.subclass, p.LOGGADOP FROM specObj AS s JOIN SppParams AS p ON s.specobjid = p.SPECOBJID WHERE s.class = 'STAR' AND p.LOGGADOP BETWEEN 1.0 AND 3.5", language='sql')

        st.markdown("**3. Estrela Supergigante**")
        st.code("SELECT TOP 10 s.specobjid, s.subclass, p.LOGGADOP FROM specObj AS s JOIN SppParams AS p ON s.specobjid = p.SPECOBJID WHERE s.class = 'STAR' AND p.LOGGADOP BETWEEN -0.5 AND 2.0", language='sql')

        st.markdown("**4. An√£ Branca**")
        st.code("SELECT TOP 10 s.specobjid, s.subclass, p.LOGGADOP FROM specObj AS s JOIN SppParams AS p ON s.specobjid = p.SPECOBJID WHERE s.class = 'STAR' AND p.LOGGADOP > 7.0", language='sql')

    st.subheader("Parte 5: O Processo Completo")
    st.markdown("""
    1. Navegue at√© a ferramenta **SQL Search**.
    2. Escolha e copie um dos comandos acima.
    3. Apague o comando que existente e cole o comando que voc√™ criou na caixa de texto do site e clique em **Submit**.
    4. Na tabela de resultados, copie um dos n√∫meros da coluna `specobjid`.
    5. Volte √† p√°gina inicial do SDSS e clique na ferramenta **Explore**.
    6. Acesse `Search by...` e cole o `specobjid` no campo apropriado (SpecObjID, apstar_id or apogee_id) para ver o espectro e todos os dados da estrela. O espectro interativo geralmente est√° na se√ß√£o "Optical Spectra".
    
    Parab√©ns! Agora voc√™ sabe como usar uma ferramenta de pesquisa profissional para explorar um dos maiores cat√°logos de espectros do mundo.
    """)

    st.divider()

    st.header("üìö Refer√™ncias Bibliogr√°ficas")
    st.markdown("""
    - O papel de Cecilia Payne na determina√ß√£o da composi√ß√£o estelar: [https://doi.org/10.1590/1806-9126-RBEF-2021-0028](https://doi.org/10.1590/1806-9126-RBEF-2021-0028)
    - Ra√ßa, g√™nero e classe social nas ci√™ncias f√≠sicas: o sil√™ncio dos homens: [https://doi.org/10.47456/Cad.Astro.v5nEspecial.44894](https://doi.org/10.47456/Cad.Astro.v5nEspecial.44894)
    - DE SOUZA OLIVEIRA FILHO, Kepler; SARAIVA, Maria de F√°tima Oliveira. **Astronomia e astrof√≠sica**. Livraria da F√≠sica, Rio Grande do Sul, 2004.
    """)

    st.divider()

    st.header("üôè Agradecimentos")
    st.markdown("""
    Agradecimento especial √† **Larissa Luciano Amorim**, doutoranda em astrof√≠sica, pela valiosa colabora√ß√£o nas aulas de astrof√≠sica.
    *Curr√≠culo Lattes: [http://lattes.cnpq.br/2024867681340986](http://lattes.cnpq.br/2024867681340986)*
    """)

    with st.expander("Agradecimento o uso de Dados do SDSS-V"):
        st.caption("""
        O financiamento para o Sloan Digital Sky Survey V foi fornecido pela Funda√ß√£o Alfred P. Sloan, pela Funda√ß√£o Heising-Simons, pela Funda√ß√£o Nacional de Ci√™ncia dos EUA (NSF) e pelas institui√ß√µes participantes. O SDSS reconhece o apoio e os recursos do Centro de Computa√ß√£o de Alto Desempenho da Universidade de Utah. Os telesc√≥pios do SDSS est√£o localizados no Observat√≥rio Apache Point, financiado pelo Cons√≥rcio de Pesquisa Astrof√≠sica e operado pela Universidade Estadual do Novo M√©xico, e no Observat√≥rio Las Campanas, operado pela Institui√ß√£o Carnegie para a Ci√™ncia. O site do SDSS √© www.sdss.org.
        
        O SDSS √© gerenciado pelo Cons√≥rcio de Pesquisa Astrof√≠sica para as institui√ß√µes participantes da colabora√ß√£o SDSS, incluindo: Institui√ß√£o Carnegie para a Ci√™ncia, Comit√™ Chileno de Aloca√ß√£o de Tempo (CNTAC), Caltech, Grupo de Participa√ß√£o Gotham, Universidade Harvard, Universidade de Heidelberg, Instituto Flatiron, Universidade Johns Hopkins, Escola Polit√©cnica Federal de Lausanne (EPFL), Instituto Leibniz de Astrof√≠sica de Potsdam (AIP), Instituto Max Planck de Astronomia (MPIA Heidelberg), Instituto Max Planck de F√≠sica Extraterrestre (MPE), Universidade de Nanjing, Observat√≥rios Astron√¥micos Nacionais da China (NAOC), Universidade Estadual do Novo M√©xico, Universidade Estadual de Ohio, Universidade Estadual da Pensilv√¢nia, Observat√≥rio Astrof√≠sico Smithsonian, Instituto de Ci√™ncia do Telesc√≥pio Espacial (STScI), Grupo de Participa√ß√£o em Astrof√≠sica Estelar, Universidade Nacional Aut√¥noma do M√©xico (UNAM), Universidade do Arizona, Universidade do Colorado Boulder, Universidade de Illinois em Urbana-Champaign, Universidade de Toronto, Universidade de Utah, Universidade da Virg√≠nia, Universidade Yale e Universidade de Yunnan.
        """)